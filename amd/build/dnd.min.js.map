{"version":3,"file":"dnd.min.js","sources":["../src/dnd.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @copyright  2015  Universit√© de Lausanne\n * @author Nicolas Dunand <nicolas.dunand@unil.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport jQuery from 'jquery';\n\nexport const init = () => {\n    var n = 0; // Matrix question number (1..)\n    var dnduistr = 'qtype_matrix_dndui';\n    var $ = jQuery;\n\n    var wasDropped = function(ismultiple, $tr, $cell, text, $draggable, checkBoxes) {\n        if (!ismultiple) {\n            if (checkBoxes) {\n                // 1. uncheck all other boxes\n                $tr.find('input').prop('checked', false);\n                // 2. remove all other dropped items\n                $cell.parents('tr').find('.cell:has(\"input\") span').remove();\n            }\n            // 3. disable $draggable\n            $draggable.draggable('disable');\n            // 4. gray out $draggable\n            $draggable.addClass('disabled');\n        }\n        if (checkBoxes) {\n            $cell.find('input').prop('checked', true); // Check the checkbox\n        }\n        var $newspan = $('<span>').text(text); // Fill in the receptacle with a clue that it is checked\n        var $deletebutton = $('<span>').text('X'); // Button to uncheck a checkbox\n        $deletebutton.click(function() {\n            var $btn = $(this);\n            // 1. uncheck the box\n            $btn.parents('td').find('input').prop('checked', false);\n            // 2. (re-)enable the $draggable\n            $draggable.draggable('enable');\n            // 3. un-gray out the $draggable\n            $draggable.removeClass('disabled');\n            // 4. remove the whole <span>\n            $btn.parent().remove();\n        });\n        $deletebutton.appendTo($newspan);\n        $newspan.appendTo($cell);\n    };\n\n    $('.que.matrix').each(function() {\n        n++;\n        var $question = $(this); // Question display DOM element\n        var $matrix = $question.find('table.matrix'); // Question table\n        if (!$matrix.hasClass('uses_dndui')) {\n            return;\n        }\n        var $baskets = $question.find(\"th:has('span.title')\"); // Table header cells, i.e. categories\n        var $receptacles = $matrix.find('.cell:has(\"input\")'); // All cells with a checkbox or a radio button\n        var $items = $question.find('.cell.c0'); // First column, i.e. items\n        var ismultiple = !!$matrix.find('input[type=checkbox]').length; // Multiple choice allowed?\n\n        $question.addClass('clearfix').addClass(dnduistr); // To make sure we only only for activated dndui\n        $baskets.addClass('outerwalled'); // To allow for simple CSS categories boundaries\n        $receptacles.addClass('outerwalled'); // Ditto\n\n        var it = 0; // Item number (1..)\n        $items.each(function() {\n            it++;\n            // Each item has to be draggable, but only to a sortable in its own row\n            var $item = $(this);\n            var text = $item.find('span.title').text();\n            var $tr = $matrix.find('tbody tr').eq(it - 1); // Table row\n            var $draggable = $(this).find('span.title'); // Draggable item\n\n            $draggable.attr('class', dnduistr + '_item' + ' ' + dnduistr + '_' + n + '_item_' + it);\n            $draggable.draggable({\n                'helper': 'clone', // We drag a clone\n                'revert': 'invalid', // Revert if not dropped onto a valid target\n                'opacity': 0.5, // Opacity while dragging\n                'containment': $matrix, // Can only be dragged this far\n                'scope': dnduistr + '_' + n + '_item_' + it // Can only be dragged to its own row's droppables\n            });\n\n            $tr.find('.cell:has(\"input\")').each(function() { // This row's each possible cell containing a checkbox\n                var $cell = $(this);\n                $cell.droppable({\n                    'activeClass': 'activated', // To hint the user where it can drop the currently dragged item\n                    'hoverClass': 'hovered', // To hint the user what will happen if dropped now\n                    'tolerance': 'pointer', // Drop accepted if pointer within droppable boundaries (easiest UX)\n                    'scope': dnduistr + '_' + n + '_item_' + it, // Only accept draggable from this row\n                    'drop': function() {\n                        wasDropped(ismultiple, $tr, $cell, text, $draggable, true);\n                    }\n                });\n                if ($cell.find('input').prop('checked')) {\n                    // This checkbox is already checked (by Moodle's back-end), so drop a draggable into it\n                    wasDropped(ismultiple, $tr, $cell, text, $draggable, false); // But don't activate the checkboxes again!\n                }\n            });\n\n        });\n\n        // Disable dragging if checkboxes are disabled\n        if ($receptacles.eq(0).find('input').prop('disabled')) {\n            $items.find('span.title').draggable('disable').addClass('disabled');\n            $receptacles.find('span span').remove();\n        }\n\n    });\n};"],"names":["n","dnduistr","$","jQuery","wasDropped","ismultiple","$tr","$cell","text","$draggable","checkBoxes","find","prop","parents","remove","draggable","addClass","$newspan","$deletebutton","click","$btn","this","removeClass","parent","appendTo","each","$question","$matrix","hasClass","$baskets","$receptacles","$items","length","it","eq","attr","droppable"],"mappings":";;;;;wJAuBoB,eACZA,EAAI,EACJC,SAAW,qBACXC,EAAIC,gBAEJC,WAAa,SAASC,WAAYC,IAAKC,MAAOC,KAAMC,WAAYC,YAC3DL,aACGK,aAEAJ,IAAIK,KAAK,SAASC,KAAK,WAAW,GAElCL,MAAMM,QAAQ,MAAMF,KAAK,2BAA2BG,UAGxDL,WAAWM,UAAU,WAErBN,WAAWO,SAAS,aAEpBN,YACAH,MAAMI,KAAK,SAASC,KAAK,WAAW,OAEpCK,SAAWf,EAAE,UAAUM,KAAKA,MAC5BU,cAAgBhB,EAAE,UAAUM,KAAK,KACrCU,cAAcC,OAAM,eACZC,KAAOlB,EAAEmB,MAEbD,KAAKP,QAAQ,MAAMF,KAAK,SAASC,KAAK,WAAW,GAEjDH,WAAWM,UAAU,UAErBN,WAAWa,YAAY,YAEvBF,KAAKG,SAAST,YAElBI,cAAcM,SAASP,UACvBA,SAASO,SAASjB,QAGtBL,EAAE,eAAeuB,MAAK,WAClBzB,QACI0B,UAAYxB,EAAEmB,MACdM,QAAUD,UAAUf,KAAK,mBACxBgB,QAAQC,SAAS,mBAGlBC,SAAWH,UAAUf,KAAK,wBAC1BmB,aAAeH,QAAQhB,KAAK,sBAC5BoB,OAASL,UAAUf,KAAK,YACxBN,aAAesB,QAAQhB,KAAK,wBAAwBqB,OAExDN,UAAUV,SAAS,YAAYA,SAASf,UACxC4B,SAASb,SAAS,eAClBc,aAAad,SAAS,mBAElBiB,GAAK,EACTF,OAAON,MAAK,WACRQ,SAGIzB,KADQN,EAAEmB,MACGV,KAAK,cAAcH,OAChCF,IAAMqB,QAAQhB,KAAK,YAAYuB,GAAGD,GAAK,GACvCxB,WAAaP,EAAEmB,MAAMV,KAAK,cAE9BF,WAAW0B,KAAK,QAASlC,SAAAA,SAA2BA,SAAW,IAAMD,EAAI,SAAWiC,IACpFxB,WAAWM,UAAU,QACP,eACA,kBACC,eACIY,cACN1B,SAAW,IAAMD,EAAI,SAAWiC,KAG7C3B,IAAIK,KAAK,sBAAsBc,MAAK,eAC5BlB,MAAQL,EAAEmB,MACdd,MAAM6B,UAAU,aACG,uBACD,oBACD,gBACJnC,SAAW,IAAMD,EAAI,SAAWiC,QACjC,WACJ7B,WAAWC,WAAYC,IAAKC,MAAOC,KAAMC,YAAY,MAGzDF,MAAMI,KAAK,SAASC,KAAK,YAEzBR,WAAWC,WAAYC,IAAKC,MAAOC,KAAMC,YAAY,SAO7DqB,aAAaI,GAAG,GAAGvB,KAAK,SAASC,KAAK,cACtCmB,OAAOpB,KAAK,cAAcI,UAAU,WAAWC,SAAS,YACxDc,aAAanB,KAAK,aAAaG"}